extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key"])

type Query {
  ### Listings
  # TODO To be migrated to Listings with bookings subgraph migration
  "Search results for listings that fit the criteria provided"
  searchListings(criteria: SearchListingsInput): [Listing]!
}

type Mutation {
  ### Reviews
  "Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking"
  submitHostAndLocationReviews(
    bookingId: ID!
    hostReview: ReviewInput!
    locationReview: ReviewInput!
  ): SubmitHostAndLocationReviewsResponse!
  "Creates a review for the guest - must be authored by host of past booking"
  submitGuestReview(
    bookingId: ID!
    guestReview: ReviewInput!
  ): SubmitGuestReviewResponse!

  ### Wallet
  addFundsToWallet(amount: Float!): AddFundsToWalletResponse!
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

#### User accounts

"Represents an Airlock user's common properties"
interface User {
  id: ID!
}

"A host is a type of Airlock user. They own listings."
type Host implements User @key(fields: "id") {
  id: ID!
  "The overall calculated rating for the host"
  overallRating: Float
}

"A guest is a type of Airlock user. They book places to stay."
type Guest implements User @key(fields: "id") {
  id: ID!
  "Amount of money in the guest's wallet"
  funds: Float!
}

### Listings
"A listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value."
type Listing @key(fields: "id") {
  id: ID!
  "The submitted reviews for this listing"
  reviews: [Review]!
}

# //TODO TO BE REMOVED WHEN FULLY MIGRATE LISTING RESOLVERS
# "What the location provides. An amenity should be tied to a specific category."
type Amenity @key(fields: "id") {
  id: ID!
}
# TODO To be migrated to Listings with bookings subgraph migration
"To search for a listing, you need these fields."
input SearchListingsInput {
  checkInDate: String!
  checkOutDate: String!
  numOfBeds: Int
  "The page in the search results, defaults to 1"
  page: Int
  "The number of listings you can display in a page, defaults to 5"
  limit: Int
  "The results sort order, defaults to cost descending"
  sortBy: SortByCriteria
}

"Listings can be sorted by these options"
enum SortByCriteria {
  COST_ASC
  COST_DESC
}

### Bookings

"A booking is a reservation for a specific listing"
type Booking @key(fields: "id") {
  id: ID!
}

### Reviews

"A review consists of a numerical rating and written text. It can be written by a host or a guest."
type Review @key(fields: "id") {
  id: ID!
  "Written comment the author has written about the review target"
  text: String!
  "User that wrote the review"
  author: User!
  "The numerical rating for the review target, on a scale of 1-5, with 5 being excellent."
  rating: Float!
}

"ReviewInput is the bare minimum needed to submit a review, not tied to any target."
input ReviewInput {
  text: String!
  rating: Float!
}

"The response after submitting reviews for both host and location together."
type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the host"
  hostReview: Review
  "Newly created review about the location"
  locationReview: Review
}

"The response after submitting reviews for a guest."
type SubmitGuestReviewResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the guest"
  guestReview: Review
}

### Payments

type AddFundsToWalletResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Updated wallet amount"
  amount: Float
}
